@page "/doctor-dashboard"
@using BlazorApp2.Data
@using BlazorApp2.Services
@using BlazorApp2.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Doctor")]

<PageTitle>Doctor Dashboard - VitalsCloud</PageTitle>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1><i class="fas fa-user-md"></i> Doctor Dashboard</h1>
        <p class="welcome-text">Welcome, @context?.User?.Identity?.Name</p>
    </div>

    <div class="dashboard-content">
        <!-- Patients Section -->
        <div class="dashboard-card">
            <div class="card-header">
                <h2><i class="fas fa-users"></i> Patients</h2>
                <span class="count-badge">@patients.Count</span>
            </div>
            <div class="table-container">
                @if (patients.Any())
                {
                    <table class="dashboard-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Date of Birth</th>
                                <th>Contact</th>
                                <th>Registered</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var patient in patients)
                            {
                                <tr>
                                    <td class="patient-name">@patient.Name</td>
                                    <td>@patient.DateOfBirth.ToString("dd/MM/yyyy")</td>
                                    <td>@patient.Contact</td>
                                    <td>@CalculateDaysAgo(patient.DateOfBirth)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-data">
                        <i class="fas fa-user-friends"></i>
                        <p>No patients registered yet.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Appointments Section -->
        <div class="dashboard-card">
            <div class="card-header">
                <h2><i class="fas fa-calendar-alt"></i> Upcoming Appointments (Next 7 Days)</h2>
                <span class="count-badge">@weeklyAppointments.Count</span>
            </div>
            <div class="table-container">
                @if (weeklyAppointments.Any())
                {
                    <table class="dashboard-table">
                        <thead>
                            <tr>
                                <th>Patient</th>
                                <th>Service</th>
                                <th>Doctor</th>
                                <th>Date & Time</th>
                                <th>Contact</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var appointment in weeklyAppointments.OrderBy(a => a.AppointmentDate))
                            {
                                <tr class="@GetAppointmentRowClass(appointment.AppointmentDate ?? DateTime.Now)">
                                    <td class="patient-name">@(appointment.Patient?.Name ?? "Unknown")</td>
                                    <td>
                                        <span class="service-badge">@appointment.Service</span>
                                    </td>
                                    <td>@appointment.DoctorName</td>
                                    <td>
                                        <div class="datetime-info">
                                            <div class="date">@(appointment.AppointmentDate?.ToString("dd MMM yyyy") ?? "N/A")</div>
                                            <div class="time">@(appointment.AppointmentDate?.ToString("HH:mm") ?? "N/A")</div>
                                        </div>
                                    </td>
                                    <td>@(appointment.Patient?.Contact ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-data">
                        <i class="fas fa-calendar-times"></i>
                        <p>No appointments scheduled for the next 7 days.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
.dashboard-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
}

.dashboard-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem;
    background: linear-gradient(135deg, #2c5aa0 0%, #1e3d72 100%);
    color: white;
    border-radius: 12px;
}

.dashboard-header h1 {
    margin: 0 0 0.5rem 0;
    font-size: 2.5rem;
    font-weight: 700;
}

.welcome-text {
    margin: 0;
    font-size: 1.2rem;
    opacity: 0.9;
}

.dashboard-content {
    display: grid;
    gap: 2rem;
}

.dashboard-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    overflow: hidden;
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    background: #f8fafc;
    border-bottom: 2px solid #e2e8f0;
}

.card-header h2 {
    margin: 0;
    color: #2c5aa0;
    font-size: 1.5rem;
    font-weight: 600;
}

.count-badge {
    background: #059669;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.9rem;
}

.table-container {
    overflow-x: auto;
}

.dashboard-table {
    width: 100%;
    border-collapse: collapse;
}

.dashboard-table th {
    background: #f1f5f9;
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: #475569;
    border-bottom: 2px solid #e2e8f0;
}

.dashboard-table td {
    padding: 1rem;
    border-bottom: 1px solid #e2e8f0;
    vertical-align: top;
}

.dashboard-table tbody tr:hover {
    background: #f8fafc;
}

.patient-name {
    font-weight: 600;
    color: #2c5aa0;
}

.service-badge {
    display: inline-block;
    background: #e0f2fe;
    color: #0277bd;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 500;
}

.datetime-info {
    font-size: 0.9rem;
}

.date {
    font-weight: 600;
    color: #1e293b;
}

.time {
    color: #64748b;
    margin-top: 0.2rem;
}

.no-data {
    text-align: center;
    padding: 3rem 2rem;
    color: #64748b;
}

.no-data i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.no-data p {
    font-size: 1.1rem;
    margin: 0;
}

.appointment-today {
    background: #fef3c7 !important;
}

.appointment-tomorrow {
    background: #dbeafe !important;
}

/* Media queries moved to custom.css */
</style>

@code {
    private List<Patient> patients = new();
    private List<Appointment> weeklyAppointments = new();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private AuthenticationState? context;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState != null)
        {
            context = await authenticationState;
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load all patients
            patients = await Task.Run(() => DbContext.Patients.OrderBy(p => p.Name).ToList());

            // Load appointments for the next 7 days
            var oneWeekFromNow = DateTime.Now.AddDays(7);
            weeklyAppointments = await Task.Run(() => 
                DbContext.Appointments
                    .Where(a => a.AppointmentDate >= DateTime.Now && a.AppointmentDate <= oneWeekFromNow)
                    .OrderBy(a => a.AppointmentDate)
                    .ToList());
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading dashboard data: {ex.Message}");
        }
    }

    private string CalculateDaysAgo(DateTime dateOfBirth)
    {
        var age = DateTime.Now.Year - dateOfBirth.Year;
        if (DateTime.Now.DayOfYear < dateOfBirth.DayOfYear)
            age--;
        return $"{age} years old";
    }

    private string GetAppointmentRowClass(DateTime appointmentDate)
    {
        var today = DateTime.Today;
        var tomorrow = today.AddDays(1);
        
        if (appointmentDate.Date == today)
            return "appointment-today";
        else if (appointmentDate.Date == tomorrow)
            return "appointment-tomorrow";
        
        return "";
    }
}
