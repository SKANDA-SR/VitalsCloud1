@page "/login"
@using BlazorApp2.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Doctor Login - VitalsCloud</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="clinic-logo">
                <i class="fas fa-heartbeat"></i>
            </div>
            <h2>VitalsCloud</h2>
            <p>Doctor Sign In</p>
        </div>

        <form @onsubmit="HandleLogin" @onsubmit:preventDefault="true">
            <div class="form-group">
                <label for="username">
                    <i class="fas fa-user"></i>
                    Username
                </label>
                <input @bind="username" type="text" id="username" placeholder="Enter your username" required />
            </div>

            <div class="form-group">
                <label for="password">
                    <i class="fas fa-lock"></i>
                    Password
                </label>
                <input @bind="password" type="password" id="password" placeholder="Enter your password" required />
            </div>

            @if (showError)
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    Invalid username or password. Please try again.
                </div>
            }

            <button type="submit" class="login-btn" disabled="@isLoading">
                @if (isLoading)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Signing In...</span>
                }
                else
                {
                    <i class="fas fa-sign-in-alt"></i>
                    <span>Sign In</span>
                }
            </button>
        </form>

        <div class="login-help">
            <div class="demo-credentials">
                <strong>Demo Credentials:</strong>
                <div class="credential-item">• Username: dr.smith | Password: password123</div>
                <div class="credential-item">• Username: dr.johnson | Password: password123</div>
                <div class="credential-item">• Username: admin | Password: admin123</div>
            </div>
        </div>
    </div>
</div>

<style>
.login-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
}

.login-card {
    background: white;
    border-radius: 16px;
    padding: 3rem 2rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.login-header {
    text-align: center;
    margin-bottom: 2rem;
}

.clinic-logo {
    width: 80px;
    height: 80px;
    background: linear-gradient(135deg, #2c5aa0 0%, #1e3d72 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
}

.clinic-logo i {
    font-size: 2rem;
    color: white;
}

.login-header h2 {
    margin: 0 0 0.5rem 0;
    color: #2c5aa0;
    font-size: 2rem;
    font-weight: 700;
}

.login-header p {
    margin: 0;
    color: #64748b;
    font-size: 1.1rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #374151;
    font-weight: 600;
    font-size: 0.9rem;
}

.form-group label i {
    margin-right: 0.5rem;
    color: #2c5aa0;
    width: 16px;
}

.form-group input {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
    background: #f9fafb;
}

.form-group input:focus {
    outline: none;
    border-color: #2c5aa0;
    background: white;
    box-shadow: 0 0 0 3px rgba(44, 90, 160, 0.1);
}

.error-message {
    background: #fee2e2;
    color: #dc2626;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
}

.error-message i {
    margin-right: 0.5rem;
}

.login-btn {
    width: 100%;
    background: linear-gradient(135deg, #2c5aa0 0%, #1e3d72 100%);
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.login-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(44, 90, 160, 0.3);
}

.login-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.login-btn .fa-spinner {
    animation: spin 1s linear infinite;
}

.login-help {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e5e7eb;
}

.demo-credentials {
    background: #f0f9ff;
    padding: 1rem;
    border-radius: 8px;
    font-size: 0.85rem;
    color: #0369a1;
}

.demo-credentials strong {
    display: block;
    margin-bottom: 0.5rem;
    color: #0c4a6e;
}

.credential-item {
    margin: 0.25rem 0;
    font-family: 'Courier New', monospace;
    background: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
}

/* Keyframes and media queries moved to custom.css */
</style>

@code {
    private string username = "";
    private string password = "";
    private bool showError = false;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        showError = false;
        isLoading = true;

        try
        {
            var success = await AuthService.LoginAsync(username, password);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Login successful! Redirecting to dashboard...");
                Navigation.NavigateTo("/doctor-dashboard");
            }
            else
            {
                showError = true;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Login error: {ex.Message}");
            showError = true;
        }
        finally
        {
            isLoading = false;
        }
    }
}
